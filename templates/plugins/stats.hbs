<style>
	.plugin-content[plugin="stats"] svg {
		margin: 20px 0 20px 0;
	}
	
</style>

<h1>"Useless" Stats</h1>
<p>Here you can find some "useless" statistics about your screenplay. Got idea for a fancy graph? Let me know at <a href="mailto:contact@afterwriting.com?Subject=Stats%20idea">contact@afterwriting.com</a>!</p>

<h2 style="margin-top: 30px">Who talks with who (by number of scenes) <div class="info-icon" section="stats-who"/></h2>
<p class="info-content" section="stats-who">Circles represent character. Each characters talking in the same scene are connected with a line. Thicker the line - more scenes together. Hover over a character circle to see how many dialogues scenes that character have with other characers</p>
<div id="who-with-who" style="text-align: center"></div>

<h2 style="margin-top: 30px">Scene length <div class="info-icon" section="stats-scene-length" /></h2>
<p class="info-content" section="stats-scene-length">Each bar represent one scene (white bars for day scenes, black bars for night scenes). Hover over a bar to see estimated time of a scene. You can click on a bar to jump to selected scene in the editor.</p>
<div id="stats-scene-length" width="100%"></div>

<h2 style="margin-top: 30px">Days and nights <div class="info-icon" section="stats-days-nights"/></h2>
<p class="info-content" section="stats-days-nights">Pie chart representing day vs night scenes breakdown. Hover over sections to see number of day/night scenes.</p>
<div id="stats-days-and-nights" style="text-align: center"></div>

<!--- scripts -->
<script>
	require(['jquery', 'd3', 'plugins/stats', 'utils/layout', 'utils/helper'], function($, d3, stats, layout, helper) {

		var render_who_with_who = function() {
			var data = stats.who_with_who.characters;
			var links = stats.who_with_who.links;
			
			var max_name_length = Math.max.apply(null, data.map(function(character){return character.name.length}));
			var padding = 7.2 * max_name_length;
			
			var max_value = Math.max.apply(null, links.map(function(d) {
				return d.scenes
			}));
			var link_scale = d3.scale.linear().domain([0, max_value]).range([1, 5]);
			links.forEach(function(link) {
				link.value = link_scale(link.scenes);
			});
			
			var svg = d3.select('#who-with-who').append('svg').attr('width', 350 + padding*2).attr('height', 300);

			var circle_size = 12;
			var inner_radius = 250;
			var translate_circle = 'translate(' + ((inner_radius / 2)+padding) + ',' + ((inner_radius / 2)+circle_size) + ')';

			var arc = d3.svg.arc().outerRadius(inner_radius).innerRadius(0);
			var arc_scale = d3.scale.linear().domain([0, inner_radius]).range([0, circle_size * 4]);
			var move_text = function(point) {
				return [point[0] + arc_scale(point[0]), point[1] + arc_scale(point[1])]
			}
			var layout = d3.layout.pie().value(function(d) {
				return 1
			});

			var points = layout(data).map(function(point) {
				return arc.centroid(point);
			});

			svg.selectAll('g')
				.data(links)
				.enter()
				.append('path')
				.attr('fill', 'none')
				.attr('stroke', '#444444')
				.attr('stroke-width', function(d) {
				return d.value
			})
				.attr('d', function(d) {
				return d3.svg.line().interpolate('bundle')([points[d.from],
					[0, 0], points[d.to]
				])
			})
				.attr('transform', translate_circle)
				.attr('class', function(d) {
				return 'who-' + d.from + ' who-' + d.to
			})

			svg.selectAll('g')
				.data(data)
				.enter()
				.append('text')
				.attr('transform', translate_circle)
				.text(function(d) {
				return d.name
			})
				.attr('class', function(d, i) {
				return 'who-' + i
			})
				.attr('font-size', 12)
				.attr('font-family', 'Courier New')
				.attr('x', function(d, i) {
				return points[i][0] > 0 ? points[i][0] + circle_size + 2 : points[i][0] - circle_size - 2 - (d.name.length * 7.2)
			})
				.attr('y', function(d, i) {
				return points[i][1] + 3
			});

			svg.selectAll('g')
				.data(points)
				.enter()
				.append('circle')
				.attr('transform', translate_circle)
				.attr('cx', function(d) {
				return d[0]
			})
				.attr('cy', function(d) {
				return d[1]
			})
				.attr('class', function(d, i) {
				return 'who-' + i
			})
				.attr('r', circle_size)
				.attr('fill', '#222222')
				.on('mouseover', function(d, i) {

				var paths = svg.selectAll('path.who-' + i);
				if (paths.size()) {
					var selectors = paths[0].reduce(function(c, n) {
						return c.concat(n.getAttribute('class').split(' '))
					}, []).map(function(c) {
						return 'circle.' + c + ',text.' + c
					}).join(',');
				} else {
					selectors = '.who-' + i;
				}
				svg.selectAll('*').transition().style('opacity', 0.1);
				paths.transition().style('opacity', 1);
				svg.selectAll(selectors).transition().style('opacity', 1);
					
				var to;
				for (var j=0; j<links.length; j++) {
					if (links[j].from == i) {
						to = links[j].to
					}
					else if (links[j].to == i) {
						to = links[j].from;
					}
					else {
						continue;
					}
					var value = links[j].scenes.toString();
					svg.append('text')
						.text(value)
						.attr('font-size', 12)
						.attr('class', 'temp-number')
						.attr('font-family', 'Courier New')
						.attr('transform', translate_circle)
						.attr('fill', '#ffffff')
						.attr('x', points[to][0]-value.length*3)
						.attr('y', points[to][1]+3);
				}

			})
				.on('mouseout', function(d, i) {
				svg.selectAll('*').transition().style('opacity', '1.0');
				svg.selectAll('.temp-number').remove();
			});

		};

		var render_days_and_nights = function() {

			var vis = d3.select('#stats-days-and-nights')
				.append('svg:svg')
				.data([stats.data.days_and_nights])
				.attr('width', 200)
				.attr('height', 200)
				.style('margin-left', 'auto')
				.style('margin-right', 'auto')
				.append('svg:g')
				.attr('transform', 'translate(100,100)');

			var arc = d3.svg.arc().outerRadius(100);
			var pie = d3.layout.pie().value(function(d) {
				return d.value;
			});

			var arcs = vis.selectAll('g')
				.data(pie)
				.enter()
				.append('svg:g')

			var color = function(d) {
				if (d.data.label == 'DAY') {
					return '#ffffff';
				} else if (d.data.label == 'NIGHT') {
					return '#222222';
				} else if (d.data.label == 'DAWN') {
					return '#777777';
				} else if (d.data.label == 'DUSK') {
					return '#444444';
				} else {
					return '#aaaaaa';
				}
			}
			arcs.append('svg:path')
				.attr('fill', function(d) {
				return color(d);
			}).attr('d', arc)
				.on("mouseover", function(d) {
				layout.show_tooltip(d.data.label + ': ' + d.data.value + (d.data.value == 1 ? ' scene' : ' scenes'));
			})
				.on("mousemove", function() {
				layout.move_tooltip(d3.event.pageX, d3.event.pageY);
			})
				.on("mouseout", function() {
				layout.hide_tooltip();
			});

			vis.append('svg:circle')
				.attr('fill', 'none')
				.attr('stroke', '#000000')
				.attr('stroke-width', '1')
				.attr('cx', '0')
				.attr('cy', '0')
				.attr('r', '100');
		};

		var render_scene_length = function() {
			var max = 0;
			stats.data.scenes.forEach(function(scene) {
				if (scene.length > max) {
					max = scene.length;
				}
			});
			stats.data.scenes.forEach(function(scene) {
				scene.value = scene.length / (max * 1.1);
			});

			var graph_width = ($('.content').width() - (layout.small ? 30 : 100));
			var scene_width = graph_width / stats.data.scenes.length;

			var vis = d3.select('#stats-scene-length')
				.append('svg:svg')
				.attr('width', '100%')
				.attr('height', '200');

			$('#stats-scene-length svg').attr('viewBox', '0 0 200px ' + graph_width + 'px')

			var bars = vis.selectAll('g')
				.data(stats.data.scenes)
				.enter()
				.append('rect');


			var color = function(d) {
				if (d.type == 'day') {
					return '#ffffff';
				} else if (d.type == 'night') {
					return '#222222';
				} else {
					return '#777777';
				}
			}

			bars.attr('width', scene_width)
				.attr('height', function(d) {
				return d.value * 200;
			})
				.attr('y', function(d) {
				return 200 - d.value * 200;
			})
				.attr('x', function(d, i) {
				return i * scene_width;
			})
				.attr('fill', color)
				.attr('stroke', '#000000')
				.style('cursor', 'pointer')
				.on('click', function(d) {
				stats.goto(d.token.line);
			})
				.on("mouseover", function(d) {
				layout.show_tooltip(d.header + ' (time: ' + helper.format_time(helper.lines_to_minutes(d.length)) + ')');
			})
				.on("mousemove", function() {
				layout.move_tooltip(d3.event.pageX, d3.event.pageY);
			})
				.on("mouseout", function() {
				layout.hide_tooltip();
			});

			vis.append('svg:path')
				.attr('d', 'M 0 0 L 0 200')
				.attr('stroke', '#000000');

			vis.append('svg:path')
				.attr('d', 'M 0 200 L 600 200')
				.attr('stroke', '#000000');

		};

		stats.activate.add(function() {
			$('#who-with-who').empty();
			$('#stats-scene-length').empty();
			$('#stats-days-and-nights').empty();

			render_who_with_who()
			render_scene_length();
			render_days_and_nights();
		});
	});
</script>